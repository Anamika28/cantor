{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cantor After reviewing currently available open source monitoring and metrics solutions while considering our use-cases and requirements, Cantor was created from ground up to provide a simple yet powerful and flexible solution for storing, querying, and processing blobs and multi-dimensional time-series data points.","title":"Introduction"},{"location":"#cantor","text":"After reviewing currently available open source monitoring and metrics solutions while considering our use-cases and requirements, Cantor was created from ground up to provide a simple yet powerful and flexible solution for storing, querying, and processing blobs and multi-dimensional time-series data points.","title":"Cantor"},{"location":"components/","text":"Components","title":"Components"},{"location":"components/#components","text":"","title":"Components"},{"location":"events/","text":"Events The Events interface defines actions dealing with context-rich events, with attached blob payloads. The Events interface stores multidimensional time-series data points; where each data point has a timestamp along with an arbitrary list of metadata (key/value strings), a number of dimensions (keys mapped to numeric values), and a payload (arbitrary byte array). Any time-series data fits will as a use case for events. Keep a log of requests to your web-service, with query parameters and headers as metadata. Add response size, request latency, and number of errors as dimensions. You could even store the response body as a payload. Metadata and dimension keys do not have to be defined beforehand, so new keys can crop up at runtime without needing to change any schema or config.","title":"Events"},{"location":"events/#events","text":"The Events interface defines actions dealing with context-rich events, with attached blob payloads. The Events interface stores multidimensional time-series data points; where each data point has a timestamp along with an arbitrary list of metadata (key/value strings), a number of dimensions (keys mapped to numeric values), and a payload (arbitrary byte array). Any time-series data fits will as a use case for events. Keep a log of requests to your web-service, with query parameters and headers as metadata. Add response size, request latency, and number of errors as dimensions. You could even store the response body as a payload. Metadata and dimension keys do not have to be defined beforehand, so new keys can crop up at runtime without needing to change any schema or config.","title":"Events"},{"location":"license/","text":"License Copyright (c) 2019, Salesforce.com, Inc. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of Salesforce.com nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"license/#license","text":"Copyright (c) 2019, Salesforce.com, Inc. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of Salesforce.com nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"motivation/","text":"Motivation","title":"Motivation"},{"location":"motivation/#motivation","text":"","title":"Motivation"},{"location":"namespaces/","text":"Namespaces","title":"Namespaces"},{"location":"namespaces/#namespaces","text":"","title":"Namespaces"},{"location":"objects/","text":"Objects The Objects interface defines actions surrounding storing and retrieving key/value pairs. Keys are unique strings and the values are arbitrary byte arrays. This is consistent with other key/value storage solutions: there are methods to create and drop namespaces, as well as methods to persist and retrieve objects. Use cases for the objects are effectively endless, storing key/value pairs is extremely common. Since values are arbitrary byte arrays, any content can be stored and retrieved using objects. Combining objects and sets can provide a large amount of utility, without spending a lot of time writing storage code. For example, create a set for the script name \u201cemail_admins.sh\u201d with entries for each version, then store the script versions in objects.","title":"Objects"},{"location":"objects/#objects","text":"The Objects interface defines actions surrounding storing and retrieving key/value pairs. Keys are unique strings and the values are arbitrary byte arrays. This is consistent with other key/value storage solutions: there are methods to create and drop namespaces, as well as methods to persist and retrieve objects. Use cases for the objects are effectively endless, storing key/value pairs is extremely common. Since values are arbitrary byte arrays, any content can be stored and retrieved using objects. Combining objects and sets can provide a large amount of utility, without spending a lot of time writing storage code. For example, create a set for the script name \u201cemail_admins.sh\u201d with entries for each version, then store the script versions in objects.","title":"Objects"},{"location":"sets/","text":"Sets The Sets interface defines a series of actions surrounding sorted sets. Each set is identified with a unique string as the set name, and a number of entries, each associated with a numerical value as the weight of the entry. Functions on sets allow users to create and drop namespaces, as well as slice and paginate sets based on the weight of the entries. Sets are commonly used to store relationships and memberships of corresponding stored values. Set names can be the names of the membership groups (\u201cadmins\u201d or \u201cusers\u201d), and the entries can be user ids or email addresses, with weight being the timestamp of when they were added to the group. Another common use case is using the set as a work queue, the set name corresponding to the name of the job (\u201ccustomer-report\u201d or \u201cdata-compaction\u201d) and the entries can be ids for the job. Using the pop(...) method allows atomically retrieving an id, ensuring the corresponding job is only run once.","title":"Sets"},{"location":"sets/#sets","text":"The Sets interface defines a series of actions surrounding sorted sets. Each set is identified with a unique string as the set name, and a number of entries, each associated with a numerical value as the weight of the entry. Functions on sets allow users to create and drop namespaces, as well as slice and paginate sets based on the weight of the entries. Sets are commonly used to store relationships and memberships of corresponding stored values. Set names can be the names of the membership groups (\u201cadmins\u201d or \u201cusers\u201d), and the entries can be user ids or email addresses, with weight being the timestamp of when they were added to the group. Another common use case is using the set as a work queue, the set name corresponding to the name of the job (\u201ccustomer-report\u201d or \u201cdata-compaction\u201d) and the entries can be ids for the job. Using the pop(...) method allows atomically retrieving an id, ensuring the corresponding job is only run once.","title":"Sets"}]}